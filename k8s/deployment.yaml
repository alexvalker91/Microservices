apiVersion: v1
kind: Namespace
metadata:
  name: microstack
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-auth
  namespace: microstack
type: Opaque
stringData:
  username: app
  password: app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: microstack
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    scrape_configs:
      - job_name: 'micro-sender'
        metrics_path: /actuator/prometheus
        static_configs:
          - targets: ['micro-sender:8081']
      - job_name: 'micro-recipient'
        metrics_path: /actuator/prometheus
        static_configs:
          - targets: ['micro-recipient:8082']
      - job_name: 'micro-collector'
        metrics_path: /actuator/prometheus
        static_configs:
          - targets: ['micro-collector:8083']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasource
  namespace: microstack
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3.13-management
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: username
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: password
          readinessProbe:
            exec:
              command: ["rabbitmq-diagnostics", "-q", "ping"]
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["rabbitmq-diagnostics", "-q", "ping"]
            initialDelaySeconds: 20
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: microstack
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: http
      port: 15672
      targetPort: 15672
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-sender
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: micro-sender
  template:
    metadata:
      labels:
        app: micro-sender
    spec:
      containers:
        - name: micro-sender
          image: micro-sender:local
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
          env:
            - name: SPRING_RABBITMQ_HOST
              value: rabbitmq
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: username
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: password
            - name: SERVER_PORT
              value: "8081"
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 20
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: micro-sender
  namespace: microstack
spec:
  selector:
    app: micro-sender
  ports:
    - port: 8081
      targetPort: 8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-recipient
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: micro-recipient
  template:
    metadata:
      labels:
        app: micro-recipient
    spec:
      containers:
        - name: micro-recipient
          image: micro-recipient:local
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
          env:
            - name: SPRING_RABBITMQ_HOST
              value: rabbitmq
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: username
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-auth
                  key: password
            - name: RECIPIENT_POLL_INTERVAL_MS
              value: "5000"
            - name: SERVER_PORT
              value: "8082"
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 20
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: micro-recipient
  namespace: microstack
spec:
  selector:
    app: micro-recipient
  ports:
    - port: 8082
      targetPort: 8082
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-collector
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: micro-collector
  template:
    metadata:
      labels:
        app: micro-collector
    spec:
      containers:
        - name: micro-collector
          image: micro-collector:local
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8083
          env:
            - name: RECIPIENT_BASE_URL
              value: http://micro-recipient:8082
            - name: COLLECTOR_FETCH_INTERVAL_MS
              value: "10000"
            - name: SERVER_PORT
              value: "8083"
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8083
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8083
            initialDelaySeconds: 20
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: micro-collector
  namespace: microstack
spec:
  selector:
    app: micro-collector
  ports:
    - port: 8083
      targetPort: 8083
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args: ["--config.file=/etc/prometheus/prometheus.yml"]
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: microstack
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: microstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
          volumeMounts:
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: grafana-provisioning
          configMap:
            name: grafana-datasource
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: microstack
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000