1) запускаем "docker-compose up --build" на уровне docker-compose.yml файла
2) отправляем POST http://localhost:8081/notification
{
    "user": "test_user",
    "message": "test_message13sdsfsdfsdfsdasd2"
}

   ловим GET http://localhost:8082/message

3) RabbitMQ http://localhost:15672/ , log: app password: app
   http://localhost:5672/ 
   
4) Grafana http://localhost:3000/ , log: admin password: admin
5) Prometeus http://localhost:9090/
             http://localhost:9090/targets
			 
6) Docker yaml, microservices содержит:
    1) rabbitmq
	2) prometheus
	3) micro-recipient
	4) grafana
	5) micro-sender
	6) micro-collector
----------------------------
7) 'micro-visualizer'
отправляем POST http://localhost:8081/notification
{
    "user": "test_user",
    "message": "test_message13sdsfsdfsdfsdasd2"
}
Получаем от микро визуализер
GET http://localhost:8084/saved-messages
----------------------------

1) запустить 'docker ps'
выполнить:
~ docker commit micro-collector micro-collector:local
вывод: sha256:c94e264ec324d7ef5277f1d8e3ff5679308843818fba5092d03c7bdd1688cc64
проверить что новый образ собран 'docker images'

~ docker commit micro-sender micro-sender:local
~ docker commit micro-recipient micro-recipient:local
----------------------------
2) создание базы в докере:
~ docker ps
~ docker exec -it postgres bash
~ psql -U app -d appdb
~ CREATE TABLE public.collected_messages_table (
    id SERIAL PRIMARY KEY,
    collected_message TEXT NOT NULL
);

проверяем
~ \l
~ \dt
